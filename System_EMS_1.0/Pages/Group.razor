@page "/group"
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json

<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
        <RadzenText TextStyle="TextStyle.H4"> List Group</RadzenText>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text="Add Group" Style="float:right" Icon="add" Click="Addgroup"></RadzenButton>
    </RadzenColumn>
</RadzenRow>
<hr />


@if (responGroup != null)
{

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="9" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@responGroup" TItem="GroupModel" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Style="height:550px">
        <Columns>
            <RadzenDataGridColumn TItem="GroupModel" Property="Groupid" Title="Group Id" Filterable="false" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="GroupModel" Property="Groupname" Title="Group Name" />
            <RadzenDataGridColumn TItem="GroupModel" Property="Groupdescription" Title="Group Description" />
            <RadzenDataGridColumn TItem="GroupModel" Property="Datecreate" Title="Date Create" />
            <RadzenDataGridColumn TItem="GroupModel" Property="Createdby" Title="Create by" />
            <RadzenDataGridColumn TItem="GroupModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="GroupModel">
                    <RadzenButton Icon="group_work" Variant="Variant.Flat" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Click="@((args) =>
                    NavGroup(GroupModel.Groupid ) )"></RadzenButton>
                    |
                    <RadzenButton Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>
                    EditGroup(GroupModel.Groupid , GroupModel.Groupname,GroupModel.Groupdescription) )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>


}
else
{
    <span>Không có dữ liệu</span>
}

@code {
    private bool isConnected;
    private Variant variant = Variant.Outlined;
    private ResponLogin us = new ResponLogin();
    //private ResponseApi responGroup;

    private ResponLogout responseSaveGroup = new ResponLogout();
    private ResponLogout responseUpdateGroup = new ResponLogout();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await Getsession();
            await Getgroup();

            StateHasChanged();
        }
    }
    private async Task Getsession()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void NavGroup(string id)
    {
        NavigationManager.NavigateTo($"/usersgroup/{id}");
    }
    private List<GroupModel> responGroup = new List<GroupModel>(); 
    private async Task Getgroup()
    {
        //responGroup = await ApiService.GetGroup(us.Token);

        var result = await ApiService.GetGroup(us.Token);
        if (result != null && result.Code == 200)
        {
            responGroup = JsonConvert.DeserializeObject<List<GroupModel>>(result.Value.ToString());
        }

    }
    private async Task Addgroup()
    {
        var result = await DialogService.OpenAsync("Add Group", ds =>
                       {
    string name = "";
    string description = "";


    return @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            <RadzenFormField Text="Group Name" Variant="@variant">
                <RadzenTextBox @bind-Value="@name" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Group Description" Variant="@variant">
                <RadzenTextBox @bind-Value="@description" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Add" Click="() => SaveGroupinModal(name,description)" Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
      ;
    });

    }
    private async Task SaveGroupinModal(string name, string desc)
    {
        responseSaveGroup = await ApiService.SaveGroup(name, desc, us.Token);
        if (responseSaveGroup.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, responseSaveGroup.Message);
            DialogService.Close();
            await Getgroup();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, responseSaveGroup.Message);
        }
    }

    private async Task EditGroup(string id, string name, string desc)
    {
        var result = await DialogService.OpenAsync("Add Group", ds =>
    {
        return @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            <RadzenFormField Text="Group Name" Variant="@variant">
                <RadzenTextBox @bind-Value="@name" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Group Description" Variant="@variant">
                <RadzenTextBox @bind-Value="@desc" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Edit" Click="() => UpdateGroupinModal(id,name,desc)" Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
          ;
    });
    }

    private async Task UpdateGroupinModal(string id, string name, string desc)
    {
        responseUpdateGroup = await ApiService.UpdateGroup(id, name, desc, us.Token);
        if (responseUpdateGroup.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, responseUpdateGroup.Message);
            DialogService.Close();
            await Getgroup();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, responseUpdateGroup.Message);
        }
    }
}
