@page "/profile/{id}"
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json
@inject HttpClient _httpclient


<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
        <RadzenText TextStyle="TextStyle.H4"> Hồ sơ người dùng </RadzenText>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text=" Thay đổi mật khẩu" Style="float:right" Icon="password" Click="ChangePass" class="rz-background-color-info-light"></RadzenButton>
        <RadzenButton Text="  Mật khẩu" Style="float:right" Icon="cached" Click="ResetPassword" class="rz-mr-2 rz-background-color-info-darker" ButtonStyle="ButtonStyle.Dark"></RadzenButton>
    </RadzenColumn>
</RadzenRow>
<hr />

@* <RadzenRow>
    <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size=" 12">
        <RadzenStack>

            <RadzenFormField Text="Tên đăng nhập" Variant="@variant">
                <RadzenTextBox @bind-Value="@user.Username" Disabled />
            </RadzenFormField>
            <RadzenFormField Text="Email" Variant="@variant">
                <RadzenTextBox @bind-Value="@user.Email" Disabled />
            </RadzenFormField>
        </RadzenStack>
    </RadzenColumn>

    <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size=" 12" >
        <RadzenStack>
            @if (user != null)
            {
                <RadzenFormField Text="Tên người dùng" Variant="@variant">
                    <RadzenTextBox @bind-Value="@user.Displayname" Disabled />
                </RadzenFormField>
                <RadzenFormField Text="Số điện thoại" Variant="@variant">
                    <RadzenTextBox @bind-Value="@user.Phonenumber" Disabled />
                </RadzenFormField>   
            }
        </RadzenStack>
    </RadzenColumn>

    <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size=" 12" >
        <RadzenStack>
            @if (user != null)
            {
              
                <RadzenFormField Text="Phòng ban" Variant="@variant">
                    <RadzenTextBox @bind-Value="@user.Deparmentname" Disabled />
                </RadzenFormField>
                <RadzenFormField Text="Id" Variant="@variant">
                    <RadzenTextBox @bind-Value="@user.Userid" Disabled />
                </RadzenFormField>

            }
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">

    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text="Thay đổi mật khẩu" Style="float:right" Icon="password" Click="ChangePass" class=" rz-mt-4 rz-background-color-info-light"></RadzenButton>
        <RadzenButton Text="Mật khẩu" Style="float:right" Icon="cached" Click="ResetPassword" class="rz-mr-2 rz-mt-4 rz-background-color-info-darker" ButtonStyle="ButtonStyle.Dark"></RadzenButton>
        <RadzenButton Text="Chỉnh sửa" Style="float:right" Icon="edit" class="rz-mr-2 rz-mt-4 rz-background-color-danger" ButtonStyle="ButtonStyle.Dark"></RadzenButton>
    </RadzenColumn>
</RadzenRow> *@



@code {

    private ResponLogin us = new ResponLogin();
    private bool isConnected;
    [Parameter] public string id { set; get; }
    private Variant variant = Variant.Outlined;

    private async Task ChangePass()
    {
        var result = await DialogService.OpenAsync("Thay đổi mật khẩu", ds =>
            {
    string passwordold = "";
    string passwordnew = "";

    return @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            <RadzenFormField Text="Mật khẩu cũ" Variant="@variant">
                <RadzenPassword @bind-Value="@passwordold" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Mật khẩu mới" Variant="@variant">
                <RadzenPassword @bind-Value="@passwordnew" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Thay đổi" Click="() => SavePassword(passwordold,passwordnew)" Style="width: 120px;" />
        </RadzenStack>
    </RadzenStack>
        ;
        });
    }

    private ResponseApi responReset;
    private async Task ResetPassword()
    {
        responReset = await ApiService.ResetPass(us.Userid, us.Token);
        if (responReset.Code == 200)
        {
            DialogService.Close();
            notification.Notify(NotificationSeverity.Success, responReset.Message);
        }
        else
        {

            notification.Notify(NotificationSeverity.Warning, responReset.Message);
        }
    }

    private ResponLogout responChangePassword = new ResponLogout();
    private async Task SavePassword(string passold, string passnew)
    {
        responChangePassword = await ApiService.ChangePassword(us.Username, passold, passnew, us.Token);

        if (responChangePassword.Code == 200)
        {
            DialogService.Close();
            notification.Notify(NotificationSeverity.Success, responChangePassword.Message);
        }
        else
        {

            notification.Notify(NotificationSeverity.Warning, responChangePassword.Message);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isConnected = true;
                await GetListUser();
                await GetUser();
            }
            StateHasChanged();
        }
    }

    private UserModel user;
    private async Task GetUser()
    {
        var result = responGetUser.FirstOrDefault(item => item.Userid == us.Userid);
        user = result;
    }
    private List<UserModel> responGetUser = new List<UserModel>();
    private async Task GetListUser()
    {
        var result = await ApiService.GetUser(us.Token);
        if (result != null && result.Code == 200)
        {
            var res = JsonConvert.DeserializeObject<List<UserModel>>(result.Value.ToString());
            responGetUser = res;
        }
    }


    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}
