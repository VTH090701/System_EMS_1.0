@page "/user"
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IDeviceService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime



<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
        <RadzenText TextStyle="TextStyle.H4"> Quản lý người dùng</RadzenText>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text="Thêm người dùng" Style="float:right" Icon="add" Click="Adduser" Size="ButtonSize.Medium" class="rz-background-color-info-dark"></RadzenButton>
        @if (user?.Userid != null)
        {
            <RadzenButton Style="float:right" Icon="edit" Click="Edituser" class="rz-mr-2" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Shade="Shade.Lighter"></RadzenButton>

            @if (user.Status == true)
            {
                <RadzenButton Style="float:right;color: green" Icon="lock_open" Click="()=>Lockuser(user.Userid)" class="rz-mr-2" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium"></RadzenButton>
            }
            else
            {
                <RadzenButton Style="float:right;color: red" Icon="lock" Click="()=>Unlockuser(user.Userid)" class="rz-mr-2" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium"></RadzenButton>
            }
        }

    </RadzenColumn>
</RadzenRow>
<hr />


<RadzenRow>
    <RadzenColumn SizeLG="3" SizeMD="3" SizeSM="4" Size=" 12">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
            <RadzenText Style="font-size:18px;font-weight:bold">Danh sách người dùng</RadzenText>
            <RadzenListBox FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                           Data=@responGetUser TextProperty="Username" ValueProperty="Userid" AllowClear="true" @bind-Value=value_user
                           Style="width: 100%; max-width: 320px; height: 470px" Change="@(() => UserValueChanged(value_user))" />
        </RadzenStack>

    </RadzenColumn>

    <RadzenColumn SizeLG="9" SizeMD="9" SizeSM="8" Size=" 12">
        <RadzenRow Gap="1rem" class="rz-mb-4">
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size=" 12">
                <RadzenStack>
                    @if (user != null)
                    {

                        <RadzenFormField Text="Tên đăng nhập" Variant="@variant">
                            <RadzenTextBox @bind-Value="@user.Username" Disabled />
                        </RadzenFormField>
                        <RadzenFormField Text="Phòng ban" Variant="@variant">
                            <RadzenTextBox @bind-Value="@user.Deparmentname" Disabled />
                        </RadzenFormField>

                    }
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size=" 12">
                <RadzenStack>
                    @if (user != null)
                    {
                        <RadzenFormField Text="Tên người dùng" Variant="@variant">
                            <RadzenTextBox @bind-Value="@user.Displayname" Disabled />
                        </RadzenFormField>
                        <RadzenFormField Text="Số điện thoại" Variant="@variant">
                            <RadzenTextBox @bind-Value="@user.Phonenumber" Disabled />
                        </RadzenFormField>

                    }
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size=" 12">
                <RadzenStack>
                    @if (user != null)
                    {
                        <RadzenFormField Text="Email" Variant="@variant">
                            <RadzenTextBox @bind-Value="@user.Email" Disabled />
                        </RadzenFormField>

                    }
                </RadzenStack>

            </RadzenColumn>
        </RadzenRow>


        @if (listRoles != null)
        {
            <RadzenDataGrid Data="@listRoles" TItem="RoleUser" AllowVirtualization="true" Style="height:450px" EmptyText="Không có dữ liệu"
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                            AllowSorting="true">
                <Columns>
                    <RadzenDataGridColumn TItem="RoleUser" Property="Rolename" Title="Tên quyền" />
                    <RadzenDataGridColumn TItem="RoleUser" Property="Description" Title="Mô tả quyền" />
                    <RadzenDataGridColumn TItem="RoleUser" Width="70px" Filterable="false">
                        <Template Context="data">
                            @if (listRolesUser != null)
                            {

                                @if (listRolesUser.Any(item1 => item1.Rolename == data.Rolename) == true)
                                {
                                    var checktrue = true;
                                    <RadzenCheckBox TriState="false" Value="checktrue"
                                                    TValue="bool" Change="()=>
                                    {
                                        if (data.Rolename != null)
                                        {
                                         RevokeUser(data.Rolename)
;
                                        }
                                    }
                                 " />
                                }
                                else
                                {
                                    var checkfalse = false;
                                    <RadzenCheckBox TriState="false" Value="checkfalse"
                                                    TValue="bool" Change="()=>
                                   

                                      {
                                        if (data.Rolename != null)
                                        {
                                          GrantUser(data.Rolename);
;
                                        }
                                    }
" />
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    </RadzenColumn>
</RadzenRow>




@code {

    private bool isConnected;
    private ResponLogin us = new ResponLogin();
    private string value_user = "";
    private Variant variant = Variant.Outlined;
    private List<DepartmentModel> responDepartment = new List<DepartmentModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isConnected = true;
                await GetListUser();
                await GetDepartment();
            }
            StateHasChanged();
        }
    }

    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    private async Task GetDepartment()
    {
        var result = await ApiService.GetDepartment(us.Token);
        if (result != null && result.Code == 200)
        {
            responDepartment = JsonConvert.DeserializeObject<List<DepartmentModel>>(result.Value.ToString());
        }
    }
    private List<UserModel> responGetUser = new List<UserModel>();
    private async Task GetListUser()
    {
        var result = await ApiService.GetUser(us.Token);
        if (result != null && result.Code == 200)
        {
            var res = JsonConvert.DeserializeObject<List<UserModel>>(result.Value.ToString());
            responGetUser = res;
        }
    }

    private async Task Lockuser(string userid)
    {
        var result = await ApiService.ChangeStatus(userid, false, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            await GetListUser();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
        await ReloadUser(userid);

    }

    private async Task Unlockuser(string userid)
    {
        var result = await ApiService.ChangeStatus(userid, true, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            await GetListUser();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
        await ReloadUser(userid);

    }
    private UserModel? user = new UserModel();

    private async Task UserValueChanged(string id)
    {
        user = responGetUser.FirstOrDefault(item => item.Userid == id);

        await GetListRoles();
        await GetListRolesUser();
    }

    private List<RoleUser> listRoles = new List<RoleUser>();
    private async Task GetListRoles()
    {
        var result = await ApiService.ListRoles(us.Token);
        if (result != null && result.Code == 200)
        {
            listRoles = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
        }
        else if (result?.Code == 404)
        {

        }
    }

    private List<RoleUser> listRolesUser = new List<RoleUser>();
    private async Task GetListRolesUser()
    {

        var result = await ApiService.ListRolesUser( user?.Userid ,  us.Token);
        if (result != null && result.Code == 200)
        {
            var res = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
            listRolesUser = res;
        }
        else if (result?.Code == 404)
        {

        }

    }

    private async void GrantUser(string roleName)
    {
        var result = await ApiService.GrantRolesUser("grant", value_user, roleName, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
        }
        else
        {

            notification.Notify(NotificationSeverity.Warning, result.Message);
        }

        await ReloadList();


    }

    private async void RevokeUser(string roleName)
    {
        var result = await ApiService.GrantRolesUser("revoke", value_user, roleName, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
        await ReloadList();


    }

    private async Task ReloadList()
    {
        await GetListRoles();
        await GetListRolesUser();
        StateHasChanged();
    }

    private async Task Adduser()
    {
        var result = await DialogService.OpenAsync("Thêm người dùng", ds =>

                        {
    string password = "";
    UserModel user = new UserModel();
    return
    @<RadzenRow>
        <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
            <RadzenTemplateForm TItem="UserModel" Data=@user Submit="()=>OnSubmit(password,user)" InvalidSubmit=@OnInvalidSubmit>
                <RadzenRow>
                    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                        <RadzenStack>
                            <RadzenFormField Text="Tên đăng nhập" Variant="@variant">
                                <RadzenTextBox @bind-Value="@user.Username" Name="Username" />
                            </RadzenFormField>
                        </RadzenStack>
                        <RadzenRequiredValidator Component="Username" Text="Tên đăng nhập không được trống" Popup=false Style="position: absolute" />

                    </RadzenColumn>
                    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                        <RadzenStack>
                            <RadzenFormField Text="Mật khẩu" Variant="@variant">
                                <RadzenPassword @bind-Value="@password" Name="password" />
                            </RadzenFormField>
                        </RadzenStack>
                        <RadzenRequiredValidator Component="password" Text="Mật khẩu không được trống" Popup=false Style="position: absolute" />

                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="rz-mt-3">
                    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                        <RadzenStack>
                            <RadzenFormField Text="Tên người dùng" Variant="@variant">
                                <RadzenTextBox @bind-Value="@user.Displayname" Name="Displayname" />
                            </RadzenFormField>
                        </RadzenStack>
                        <RadzenRequiredValidator Component="Displayname" Text="Tên người dùng không được trống" Popup=false Style="position: absolute" />

                    </RadzenColumn>
                    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                        <RadzenStack>
                            <RadzenFormField Text="Email" Variant="@variant">
                                <RadzenTextBox @bind-Value="@user.Email" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="rz-mt-3">
                    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                        <RadzenStack>
                            <RadzenFormField Text="Số điện thoại" Variant="@variant">
                                <RadzenTextBox @bind-Value="@user.Phonenumber" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                        <RadzenStack>
                            @if (responDepartment != null)
                        {
                            <RadzenFormField Text="Phòng ban" Variant="@variant">

                                <RadzenDropDown AllowClear="true" @bind-Value=user.Departmentid AllowVirtualization="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Name="Departmentid" AllowFiltering="true" Data=@responDepartment TextProperty="Departmentname" ValueProperty="Departmentid" Style="width: 100%;" Placeholder="Chọn phòng ban" />
                            </RadzenFormField>
                        }
                        </RadzenStack>
                        <RadzenRequiredValidator Component="Departmentid" Text="Phòng ban không được trống" Popup=false Style="position: absolute" />

                    </RadzenColumn>
                </RadzenRow>


                <hr />
                <RadzenStack class="rz-mt-3" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                    <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Thêm" Style="width: 80px;" />
                </RadzenStack>

            </RadzenTemplateForm>
        </RadzenColumn>

    </RadzenRow>

                                                                                                                                                                    ;
                                                                            }, new DialogOptions() { Width = "800px" });

    }

    async Task OnSubmit(string password, UserModel user)
    {
        var result = await ApiService.SaveUser(user, password, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await GetListUser();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);

        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    //console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }




    private async Task Edituser()
    {
        if (user != null)
        {
            string? dis = user.Displayname;
            string? email = user.Email;
            string? phone = user.Phonenumber;
            string? deid = user.Departmentid;

            var result = await DialogService.OpenAsync("Cập nhật người dùng", ds =>
                                                            {
    return @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            <RadzenFormField Text="Tên người dùng" Variant="@variant">
                <RadzenTextBox @bind-Value="@dis" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Email" Variant="@variant">
                <RadzenTextBox @bind-Value="@email" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Số điện thoại" Variant="@variant">
                <RadzenTextBox @bind-Value="@phone" />
            </RadzenFormField>
        </RadzenStack>

        @if (responDepartment != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Department" Variant="@variant">
                <RadzenDropDown @bind-Value="@deid" Data=@responDepartment TextProperty="Departmentname" ValueProperty="Departmentid" Placeholder="Chọn bộ phận " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Cập nhật" Style="width: 120px;" Click="() =>
            {
                        if (user.Userid != null && dis != null && email != null && phone != null && deid != null)
                        {
                        UpdateUserinModal( user.Userid ,dis,email,phone,deid);
                        }
                    }

                    " />
        </RadzenStack>

    </RadzenStack>
    ;
                                                        });

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, "Hãy chọn bệnh nhân");

        }
    }

    private async void UpdateUserinModal(string id, string display, string email, string phone, string deid)
    {
        var result = await ApiService.UpdateUser(id, display, email, phone, deid, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);

        }
        await ReloadUser(user?.Userid);

    }

    private async Task ReloadUser(string? id)
    {
        await GetListUser();
        GetUser(id!);
        StateHasChanged();
    }

    private void GetUser(string id)
    {
        user = responGetUser.FirstOrDefault(item => item.Userid == id);
    }
}
