@page "/editdevice/{id:int}"
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json
@inject HttpClient _httpclient


<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">

        <div style="display:flex">
            <RadzenIcon Icon="exit_to_app" class="rz-mt-1 rz-mr-2" Style="font-size:xx-large;transform: rotate(180deg);cursor:pointer" @onclick="NavDevice" />

            <RadzenText TextStyle="TextStyle.H4"> Edit Device</RadzenText>

        </div>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
    </RadzenColumn>
</RadzenRow>
<hr />
@if (device != null)
{
    <RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Device name" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Devicename" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>

                    @if (listdetype != null)
                    {
                        <RadzenFormField Text="Device Type" Variant="@variant">
                            <RadzenDropDownDataGrid @bind-Value="@device.Devicetype" Data=@listdetype TextProperty="Display" ValueProperty="Typeid" Placeholder="Select Device Type" Change="ChangeDeviceType" />
                        </RadzenFormField>
                    }
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Start date" Variant="@variant">
                   
                        <RadzenDatePicker @bind-Value="@start_date" />

                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    @if (listprogroup != null)
                    {
                        <RadzenFormField Text="Product Group" Variant="@variant">
                            <RadzenDropDownDataGrid @bind-Value="@device.Productgroup" Data=@listprogroup TextProperty="Display" ValueProperty="Id" Placeholder="Select Product Group" />
                        </RadzenFormField>
                    }
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Device model" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Devicemodel" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Serial number" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Serialnumber" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>

        </RadzenRow>

        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Lr_code" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Lr_code" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Company" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Company" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    @if (listget != null)
                    {
                        <RadzenFormField Text="Nation" Variant="@variant">
                            <RadzenDropDownDataGrid @bind-Value="@device.National" Data=@listget TextProperty="Nationnamevie" ValueProperty="Nationid" Placeholder="Select Nation" />
                        </RadzenFormField>
                    }

                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>

            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Info" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Info" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Comcode" Variant="@variant">
                        <RadzenTextBox @bind-Value="device.Comcode" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    @if (device.Devicetype == 0 || device.Devicetype == 2)
                    {
                        <RadzenFormField Text="Main device" Variant="@variant">
                            <RadzenNumeric @bind-Value="device.Maindevice" />
                        </RadzenFormField>
                    }
                    else if (device.Devicetype == 1)
                    {
                        @if (listdevice != null)
                        {
                            <RadzenFormField Text="Main device" Variant="@variant">
                                <RadzenDropDownDataGrid @bind-Value="device.Maindevice" Data=@listdevice TextProperty="Devicename" ValueProperty="Deviceid" Placeholder="Select Main Device" />
                            </RadzenFormField>
                        }
                    }
                </RadzenStack>
            </RadzenColumn>

        </RadzenRow>


        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Buy date" Variant="@variant">
                       
                        <RadzenDatePicker @bind-Value="buy_date" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Expdate" Variant="@variant">
                       
                        <RadzenDatePicker @bind-Value="exp_date" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Note" Variant="@variant">
                        <RadzenTextArea @bind-Value="device.Note" Rows="4" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>

            <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
                <RadzenButton Text="Update Device" Style="float:right" Icon="save" Click="UpdateDeviceinModal"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>

}

@code {
    [Parameter] public int id { set; get; }
    private Variant variant = Variant.Outlined;
    private bool isConnected;
    private ResponLogin us = new ResponLogin();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await Getsession();
            await GetNation();
            await GetDeType();
            await GetProGroup();
            await GetDevice();
            await GetDeviceEdit();

            StateHasChanged();
        }
    }

    private void ChangeDeviceType()
    {
        if (device.Devicetype != 0)
        {
            device.Maindevice = 0;
        }
    }

    private async Task Getsession()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void NavDevice()
    {
        NavigationManager.NavigateTo("/devices");

    }

    private List<ResponNation> listget = new List<ResponNation>();
    private async Task GetNation()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "http://192.168.1.252:60227/api/config");
            request.Headers.Add("type", "nation");
            request.Headers.Add("token", us.Token);
            var response = await _httpclient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<ResponseApi>();

            if (result != null && result.Code == 200)
            {
                listget = JsonConvert.DeserializeObject<List<ResponNation>>(result.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }

    private List<ResponDeType> listdetype = new List<ResponDeType>();
    private async Task GetDeType()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "http://192.168.1.252:60227/api/config");
            request.Headers.Add("type", "devicetype");
            request.Headers.Add("token", us.Token);
            var response = await _httpclient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<ResponseApi>();

            if (result != null && result.Code == 200)
            {
                listdetype = JsonConvert.DeserializeObject<List<ResponDeType>>(result.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }

    private List<ResponProGroup> listprogroup = new List<ResponProGroup>();
    private async Task GetProGroup()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "http://192.168.1.252:60227/api/config");
            request.Headers.Add("type", "productgroup");
            request.Headers.Add("token", us.Token);
            var response = await _httpclient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<ResponseApi>();

            if (result != null && result.Code == 200)
            {
                listprogroup = JsonConvert.DeserializeObject<List<ResponProGroup>>(result.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }


    private List<DeviceModel> listdevice = new List<DeviceModel>();
    private async Task GetDevice()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "http://192.168.1.252:60227/api/devices");
            request.Headers.Add("token", us.Token);
            var response = await _httpclient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<ResponseApi>();

            if (result != null && result.Code == 200)
            {
                listdevice = JsonConvert.DeserializeObject<List<DeviceModel>>(result.Value.ToString());

            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }


    private DeviceModel device = new DeviceModel();

    private DateTime start_date = new DateTime();
    private DateTime buy_date = new DateTime();
    private DateTime exp_date = new DateTime();
    private async Task GetDeviceEdit()
    {
        if (listdevice != null)
        {
            device = listdevice.FirstOrDefault(item => item.Deviceid == id);

            if(device != null)
            {

                DateTime.TryParse(device.Startdate, out start_date);
                DateTime.TryParse(device.Buydate, out buy_date);
                DateTime.TryParse(device.Expdate, out exp_date);

            }
        }
    }

    private async Task UpdateDeviceinModal()
    {
        try
        {
            var request = new
            {
                id = device.Deviceid,
                devicename = device.Devicename,
                devicetype = device.Devicetype,
                productgroup = device.Productgroup,
                startdate = start_date.ToString("yyyy-MM-dd"),
                devicemodel = device.Devicemodel,
                serialnumber = device.Serialnumber,
                lr_code = device.Lr_code,
                company = device.Company,
                national = device.National,
                info = device.Info,
                comcode = device.Comcode,
                maindevice = device.Maindevice,
                buydate = buy_date.ToString("yyyy-MM-dd"),
                expdate = exp_date.ToString("yyyy-MM-dd"),
                note = device.Note,
                token = us.Token
            };
            var jsonContent = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            var response = await _httpclient.PutAsync("http://192.168.1.252:60227/api/devices", content);
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<ResponLogout>();
            if (result.Code == 200)
            {
                notification.Notify(NotificationSeverity.Success, result.Message);
             
                NavigationManager.NavigateTo("/devices");

            }
            else
            {
                notification.Notify(NotificationSeverity.Warning, result.Message);
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }
}
