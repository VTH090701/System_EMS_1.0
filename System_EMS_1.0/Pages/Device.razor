@page "/devices"
@using Data
@using Services
@using Newtonsoft.Json
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@inject HttpClient _httpclient




@if (isshowedit == false)
{
    <RadzenRow>
        <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
            <RadzenText TextStyle="TextStyle.H4"> Danh mục thiết bị</RadzenText>
        </RadzenColumn>
        <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
            <RadzenButton Text="Thêm thiết bị" Style="float:right" Icon="add" Click="AddDevice" class="rz-background-color-info-dark"></RadzenButton>
        </RadzenColumn>
    </RadzenRow>
    <hr />
    @if (listdevice != null)
    {
        <RadzenDataGrid AllowGrouping="false" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="9" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@listdevice" TItem="DeviceModel" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Style="height:550px">
            <GroupHeaderTemplate>
                @{

                    if (@context.GroupDescriptor.GetTitle() == "Nhóm sản phẩm")
                    {

                        @if (listprogroup != null)
                        {
                            ResponProGroup product = listprogroup.FirstOrDefault(item1 => item1.Id == @context.Data.Key);
                            @if (product != null)
                            {
                                <span>Nhóm sản phẩm: @product.Display</span>
                            }
                        }

                    }
                    else if (@context.GroupDescriptor.GetTitle() == "Loại thiết bị")
                    {

                        @if (listdetype != null)
                        {
                            ResponDeType type = listdetype.FirstOrDefault(item => item.Typeid == @context.Data.Key);
                            @if (type != null)
                            {
                                <span>Nhóm loại: @type.Display</span>
                            }
                        }
                    }
                    else
                    {
                        @context.GroupDescriptor.GetTitle()
                        <span>: </span>
                        @context.Data.Key
                        ;
                    }
                }

            </GroupHeaderTemplate>
            <Columns>
                @* <RadzenDataGridColumn Filterable="false" Property="Deviceid" Title="Id" Frozen="true" Width="80px" TextAlign="TextAlign.Center" /> *@
                <RadzenDataGridColumn TItem="DeviceModel" Property="Devicename" Title="Tên thiết bị" />
                <RadzenDataGridColumn TItem="DeviceModel" Property="Devicemodel" Title="Mô hình thiết bị" />
                <RadzenDataGridColumn TItem="DeviceModel" Title="Nhóm sản phẩm" Property="Productgroup">
                    <Template Context="data">
                        @{
                            ResponProGroup product = listprogroup.FirstOrDefault(item => item.Id == data.Productgroup);
                        }
                        @if (product != null)
                        {
                            <span>@product.Display</span>
                        }
                        else
                        {
                            <span></span>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DeviceModel" Title="Loại thiết bị" Property="Devicetype">
                    <Template Context="data">
                        @{
                            ResponDeType type = listdetype.FirstOrDefault(item => item.Typeid == data.Devicetype);
                        }
                        @if (type != null)
                        {
                            <span>@type.Display</span>
                        }
                        else
                        {
                            <span></span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DeviceModel" Property="Lr_code" Title="Lr_code" />
                <RadzenDataGridColumn TItem="DeviceModel" Property="Company" Title="Công ty" />
                <RadzenDataGridColumn TItem="DeviceModel" Title="Thiết bị chính" Property="Maindevice">
                    <Template Context="data">
                        @{
                            ResponDeType type = listdetype.FirstOrDefault(item => item.Typeid == data.Devicetype);
                            if (type.Typeid == 2)
                            {
                                <span>@data.Maindevice</span>

                            }
                            else if (type.Typeid == 1)
                            {
                                var main = listdevice.FirstOrDefault(item => item.Deviceid == data.Maindevice);
                                var maindev = main.Devicename;
                                <span>@maindev</span>

                            }
                        }
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="DeviceModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="120px">
                    <Template Context="DeviceModel">

                        <RadzenButton Icon="camera_enhance" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Success" Click="@(() => ViewDevice(DeviceModel.Deviceid ) )"></RadzenButton>
                        |
                        <RadzenButton Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@(() => EditDevice(DeviceModel.Deviceid ) )"></RadzenButton>


                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <span>Không có dữ liệu</span>
    }
}
else
{
    <EditDevice id="@device_id" ButtonCallBack="NavCallBack"></EditDevice>
}



@code {
    private Variant variant = Variant.Outlined;
    private bool isConnected;
    private ResponLogin us = new ResponLogin();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isConnected = true;
                await GetNation();
                await GetDeType();
                await GetProGroup();
                await GetDevice();

            }
            StateHasChanged();
        }
    }

    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //Edit
    private bool isshowedit = false;
    private int device_id = 0;
    private void EditDevice(int id)
    {
        if (id != 0)
        {
            isshowedit = true;
            device_id = id;
        }
    }
    private void NavCallBack()
    {
        isshowedit = false;
    }


    private void AddDevice()
    {
        NavigationManager.NavigateTo("/adddevice");
    }

    private List<ResponNation> listget = new List<ResponNation>();
    private async Task GetNation()
    {
        try
        {
           
            var result = await ApiService.ApiConfig("nation ", us.Token);
            if (result != null && result.Code == 200)
            {
                listget = JsonConvert.DeserializeObject<List<ResponNation>>(result.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }

    private List<ResponDeType> listdetype = new List<ResponDeType>();
    private async Task GetDeType()
    {
        try
        {
            
            var result = await ApiService.ApiConfig("devicetype", us.Token);

            if (result != null && result.Code == 200)
            {
                listdetype = JsonConvert.DeserializeObject<List<ResponDeType>>(result.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }

    private List<ResponProGroup> listprogroup = new List<ResponProGroup>();
    private async Task GetProGroup()
    {
        try
        {
          
            var result = await ApiService.ApiConfig("productgroup", us.Token);
            if (result != null && result.Code == 200)
            {
                listprogroup = JsonConvert.DeserializeObject<List<ResponProGroup>>(result.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }

    private List<DeviceModel> listdevice = new List<DeviceModel>();
    private async Task GetDevice()
    {
        var result = await ApiService.GetListDevice(us.Token);

        if (result != null && result.Code == 200)
        {
            listdevice = JsonConvert.DeserializeObject<List<DeviceModel>>(result.Value.ToString());
        }
        else
        {
            listdevice = new List<DeviceModel>();
        }
    }

    private async Task Reload()
    {
        await GetDevice();
        StateHasChanged();
    }

    private DeviceModel devicedetails = new DeviceModel();
    private async Task ViewDevice(int id)
    {
        try
        {

            var result = await ApiService.DetailsDevice(id.ToString(), us.Token);
            if (result != null && result.Code == 200)
            {
                devicedetails = JsonConvert.DeserializeObject<DeviceModel>(result.Value.ToString());
                if (devicedetails != null)
                {
                    var resultdialog = await DialogService.OpenAsync("Chi tiết trang thiết bị", ds =>
                                                            {
       DateTime.TryParse(devicedetails.Startdate, out DateTime startdate);
       DateTime.TryParse(devicedetails.Buydate, out DateTime buydate);
       DateTime.TryParse(devicedetails.Expdate, out DateTime expdate);


       return @<RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Tên thiết bị" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Devicename" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>

                    @if (listdetype != null)
                {
                    <RadzenFormField Text="Loại thiết bị" Variant="@variant">
                        <RadzenDropDownDataGrid @bind-Value="devicedetails.Devicetype" Disabled Data=@listdetype TextProperty="Display" ValueProperty="Typeid" Placeholder="Select Device Type" />
                    </RadzenFormField>
                }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Ngày bắt đầu" Variant="@variant">
                        <RadzenDatePicker @bind-Value="startdate" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>

                    @if (listprogroup != null)
                {
                    <RadzenFormField Text="Nhóm sản phẩm" Variant="@variant">
                        <RadzenDropDownDataGrid @bind-Value="@devicedetails.Productgroup" Disabled Data=@listprogroup TextProperty="Display" ValueProperty="Id" Placeholder="Select Product Group" />
                    </RadzenFormField>
                }
                </RadzenStack>

            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Mô hình thiết bị" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Devicemodel" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Số serial" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Serialnumber" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Lr_code" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Lr_code" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Công ty" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Company" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    @if (listget != null)
                {
                    <RadzenFormField Text="Quốc gia" Variant="@variant">
                        <RadzenDropDownDataGrid @bind-Value="@devicedetails.National" Disabled Data=@listget TextProperty="Nationnamevie" ValueProperty="Nationid" Placeholder="Select Nation" />
                    </RadzenFormField>
                }

                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Thông tin" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Info" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Comcode" Variant="@variant">
                        <RadzenTextBox @bind-Value="devicedetails.Comcode" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>

                    @if (devicedetails.Devicetype == 0 || devicedetails.Devicetype == 2)
                {
                    <RadzenFormField Text="Thiết bị chính" Variant="@variant">
                        <RadzenNumeric @bind-Value="devicedetails.Maindevice" Disabled />
                    </RadzenFormField>
                }
                else if(devicedetails.Devicetype == 1)
                {
                    @if (listdevice != null)
                {
                    <RadzenFormField Text="Thiết bị chính" Variant="@variant">
                        <RadzenDropDownDataGrid @bind-Value="@devicedetails.Maindevice" Data=@listdevice TextProperty="Devicename" ValueProperty="Deviceid" Placeholder="Select Main Device" Disabled />
                    </RadzenFormField>
                }
                }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Ngày mua" Variant="@variant">
                        <RadzenDatePicker @bind-Value="buydate" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Ngày hết hạn" Variant="@variant">
                        <RadzenDatePicker @bind-Value="expdate" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Ghi chú" Variant="@variant">
                        <RadzenTextArea @bind-Value="devicedetails.Note" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />

        </RadzenStack>
    </RadzenStack>
                    ;
                });
                }
            }
        }
        catch (Exception ex)
        {
            throw new NotImplementedException();
        }
    }
}
