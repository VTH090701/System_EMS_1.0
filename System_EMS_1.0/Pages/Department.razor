@page "/department"
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json

<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
        <RadzenText TextStyle="TextStyle.H4"> Danh sách phòng ban</RadzenText>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text="Thêm phòng ban" Style="float:right" Icon="add" Click="AddDepartment" class="rz-background-color-info-dark"></RadzenButton>
    </RadzenColumn>
</RadzenRow>
<hr />


@if (responDepartment != null && responDepartment.Count > 0)
{
    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="8" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@responDepartment" TItem="DepartmentModel" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Style="height:550px" >

        <Columns>
            @*<RadzenDataGridColumn Filterable="false" Frozen="true" Width="80px" TextAlign="TextAlign.Center" TItem="DepartmentModel" Property="Departmentid" Title="Department Id" /> *@
            <RadzenDataGridColumn TItem="DepartmentModel" Property="Departmentname" Title="Tên phòng ban" />
            <RadzenDataGridColumn TItem="DepartmentModel" Property="Departmentdescription" Title="Mô tả" />
            <RadzenDataGridColumn TItem="DepartmentModel" Property="Departmentsortname" Title="Tên ngắn" />
            <RadzenDataGridColumn TItem="DepartmentModel" Property="Datecreate" Title="Ngày tạo" />
            <RadzenDataGridColumn TItem="DepartmentModel" Title="Người tạo" Property="Createdby">
                <Template Context="data">
                    @{
                        UserModel? user = responGetUser.FirstOrDefault(item => item.Userid == data.Createdby);
                    }
                    @if (user != null)
                    {
                        <span>@user.Displayname</span>
                    }
                    else
                    {
                        <span></span>
                    }
                </Template>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="DepartmentModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">
                <Template Context="data">
                    <RadzenButton Icon="edit" Shade="Shade.Lighter" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>
                    {
                        if (data.Departmentid != null && data.Departmentname != null && data.Departmentdescription != null && data.Departmentsortname != null)
                        {
                        EditDepartment(data.Departmentid, data.Departmentname, data.Departmentdescription, data.Departmentsortname);
                        }
                    } )"></RadzenButton>

                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>



}
else
{
    <span>Không có dữ liệu</span>
}


@code {
    private Variant variant = Variant.Outlined;
    private ResponLogin us = new ResponLogin();
    private bool isConnected;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isConnected = true;
                await GetDepartment();
                await GetListUser();
            }
            StateHasChanged();
        }
    }

    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private List<UserModel> responGetUser = new List<UserModel>();
    private async Task GetListUser()
    {
        var result = await ApiService.GetUser(us.Token);
        if (result != null && result.Code == 200)
        {
            var res = JsonConvert.DeserializeObject<List<UserModel>>(result.Value.ToString());
            responGetUser = res;
        }
    }

    private List<DepartmentModel> responDepartment = new List<DepartmentModel>();
    private async Task GetDepartment()
    {

        var result = await ApiService.GetDepartment(us.Token);
        if (result != null && result.Code == 200)
        {
            responDepartment = JsonConvert.DeserializeObject<List<DepartmentModel>>(result.Value.ToString());
        }
        else if (result?.Code == 401)
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);

        }

    }

    private async Task AddDepartment()
    {
        var result = await DialogService.OpenAsync("Thêm phòng ban", ds =>
                        {


    DepartmentModel department = new DepartmentModel();
    return @<RadzenRow>
        <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
            <RadzenTemplateForm TItem="DepartmentModel" Data=@department Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                <RadzenStack>
                    <RadzenFormField Text="Tên phòng ban" Variant="@variant">
                        <RadzenTextBox @bind-Value="@department.Departmentname" Name="Departmentname" />
                    </RadzenFormField>

                </RadzenStack>
                <RadzenRequiredValidator Component="Departmentname" Text="Tên phòng ban không được trống" Popup=false Style="position: absolute" />
                <RadzenStack class="rz-mt-3">
                    <RadzenFormField Text="Mô tả" Variant="@variant">
                        <RadzenTextBox @bind-Value="@department.Departmentdescription" />
                    </RadzenFormField>
                </RadzenStack>

                <RadzenStack class="rz-mt-3">
                    <RadzenFormField Text="Tên ngắn" Variant="@variant">
                        <RadzenTextBox @bind-Value="@department.Departmentsortname" />
                    </RadzenFormField>
                </RadzenStack>
                <hr />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                    <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    <RadzenButton Text="Thêm" ButtonType="ButtonType.Submit" Style="width: 80px;" />
                </RadzenStack>

            </RadzenTemplateForm>
        </RadzenColumn>

    </RadzenRow>
                        ;
                        });

    }
    async Task OnSubmit(DepartmentModel department)
    {
        //console.Log($"Submit: {JsonSerializer.Serialize(model, new JsonSerializerOptions() { WriteIndented = true })}");
        var result = await ApiService.SaveDepartment(department, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await GetDepartment();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }



    private async void EditDepartment(string id, string name, string desc, string sort)
    {

        var result = await DialogService.OpenAsync("Cập nhật phòng ban", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            <RadzenFormField Text="Tên phòng ban" Variant="@variant">
                <RadzenTextBox @bind-Value="@name" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Mô tả" Variant="@variant">
                <RadzenTextBox @bind-Value="@desc" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Tên ngắn" Variant="@variant">
                <RadzenTextBox @bind-Value="@sort" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
            <RadzenButton Text="Cập nhật" Click="() => UpdateDepartmentinModal( id, name, desc, sort)" Style="width: 120px;" />
        </RadzenStack>
    </RadzenStack>
    );
    }


    private async Task UpdateDepartmentinModal(string id, string name, string desc, string sort)
    {
        var result = await ApiService.UpdateDepartment(id, name, desc, sort, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);

            DialogService.Close();
            await GetDepartment();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
    }
}
