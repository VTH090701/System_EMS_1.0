@page "/usersgroup/{id}"
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json

<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">

        <div style="display:flex">
            <RadzenIcon Icon="exit_to_app" class="rz-mt-1 rz-mr-2" Style="font-size:xx-large;transform: rotate(180deg);cursor:pointer" @onclick="NavUserGr" />

            <RadzenText TextStyle="TextStyle.H4"> Infor in Group</RadzenText>

        </div>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text="Add User in Group" Style="float:right" Icon="add" Click="AddUserInGr"></RadzenButton>
    </RadzenColumn>
</RadzenRow>
<hr />
<RadzenRow>
    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
        @if (responUserinGroup != null && responUserinGroup.Count > 0)
        {
            <RadzenDataGrid Data="@responUserinGroup" TItem="UsersinGroup" AllowVirtualization=" true"
                            AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                            AllowSorting="true">
                <Columns>
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Userid" Title="User Id" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Displayname" Title="Display Name" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Phonenumber" Title="Phone Name" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Email" Title="Email" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Timejoin" Title="Time Join" />

                    <RadzenDataGridColumn TItem="UsersinGroup" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="UsersinGroup">

                            <RadzenButton Icon="delete" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                        DeleteUserInGr(UsersinGroup.Userid) )"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <span>Không có dữ liệu</span>
        }

    </RadzenColumn>
    <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">

        <div class="row ">
            <div class="col-12">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Role Name</th>
                            <th>Description</th>

                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (listRoles != null)
                        {
                            @foreach (var item in listRoles)
                            {

                                <tr>
                                    <td>@item.Rolename</td>
                                    <td>@item.Description</td>
                                    <td>
                                        @if (listRolesGroup != null)
                                        {
                                            @if (listRolesGroup.Any(item1 => item1.Rolename == item.Rolename) == true)
                                            {
                                                <input type="checkbox" checked @onchange="()=> RevokeGroup(item.Rolename)" />
                                            }
                                            else
                                            {
                                                <input type="checkbox" @onchange="()=>GrantGroup(item.Rolename)" />
                                            }
                                        }
                                        else if( listRolesGroup == null)
                                        {
                                            <input type="checkbox" @onchange="()=>GrantGroup(item.Rolename)" />

                                        }

                                    </td>
                                </tr>
                            }
                        }

                    </tbody>
                </table>
            </div>
        </div>


    </RadzenColumn>
</RadzenRow>






@code {
    [Parameter] public string id { set; get; }
    private bool isConnected;
    private ResponLogin us;
    private List<UsersinGroup> responUserinGroup;
    private Variant variant = Variant.Outlined;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await Getsession();
            await GetUserinGr();
            await GetUser();
            await GetListRoles();
            await GetListRolesGroup();
            StateHasChanged();
        }
    }

    private async Task NavUserGr()
    {
        NavigationManager.NavigateTo("/group");

    }

    private List<RoleUser> listRoles;
    private async Task GetListRoles()
    {
        //listRoles = await ApiService.ListRoles(us.Token);
        var result = await ApiService.ListRoles(us.Token);
        if (result != null && result.Code == 200)
        {
            listRoles = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
        }
    }

    private List<RoleUser> listRolesGroup;
    private async Task GetListRolesGroup()
    {
        var result = await ApiService.ListRolesGroup(id, us.Token);
        if (result != null && result.Code == 200)
        {
            listRolesGroup = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
        }
    }

    private ResponLogout responGrantRolesGroup;
    private ResponLogout responRevokeRolesGroup;

    public async Task GrantGroup(string rolename)
    {
    
        responGrantRolesGroup = await ApiService.GrantRolesGroup("grant", id, rolename, us.Token);
        if (responGrantRolesGroup.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, responGrantRolesGroup.Message);
            await GetListRoles();
            await GetListRolesGroup();

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, responGrantRolesGroup.Message);
        }

    }
    public async Task RevokeGroup(string rolename)
    {

        responRevokeRolesGroup = await ApiService.GrantRolesGroup("revoke", id, rolename, us.Token);
        if (responRevokeRolesGroup.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, responRevokeRolesGroup.Message);
            await GetListRoles();
            await GetListRolesGroup();

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, responRevokeRolesGroup.Message);
        }


    }
    private async Task Getsession()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task GetUserinGr()
    {
        //responUserinGroup = await ApiService.GetUsersInGroup(id, us.Token);

        var result = await ApiService.GetUsersInGroup(id, us.Token);
        if (result.Code == 200)
        {
            var result1 = JsonConvert.DeserializeObject<List<UsersinGroup>>(result.Value.ToString());
            responUserinGroup = result1;
        }
        else if (result.Code == 404)
        {
            responUserinGroup = new List<UsersinGroup>();
        }
    }

    private List<UserModel> responGetUser;

    private async Task GetUser()
    {
        //responGetUser = await ApiService.GetUser(us.Token);
        var result = await ApiService.GetUser(us.Token);
        if (result != null && result.Code == 200)
        {
            responGetUser = JsonConvert.DeserializeObject<List<UserModel>>(result.Value.ToString());
        }
    }

    private async Task AddUserInGr()
    {
        var result = await DialogService.OpenAsync("Add User In Group", ds =>
                {
    string userid = "";
    return @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            @if (responGetUser != null)
        {
            <RadzenFormField Text="User" Variant="@variant">
                <RadzenDropDownDataGrid @bind-Value="@userid" Data=@responGetUser TextProperty="Displayname" ValueProperty="Userid" Placeholder="Select User" />
            </RadzenFormField>
        }


        </RadzenStack>


        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Add" Click="() => SaveUserinGr(userid)" Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
    ;
            });

    }

    private ResponLogout responSaveAddUserInGr;

    private async Task SaveUserinGr(string iduser)
    {
        responSaveAddUserInGr = await ApiService.Add_RemoveUserInGroup("add", id, iduser, us.Token);
        if (responSaveAddUserInGr.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, responSaveAddUserInGr.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, responSaveAddUserInGr.Message);
        }
    }

    async Task Reload()
    {
        await GetUserinGr();
        StateHasChanged();
    }

    private ResponLogout responSaveRemoveUserInGr;

    private async Task DeleteUserInGr(string iduser)
    {
        responSaveRemoveUserInGr = await ApiService.Add_RemoveUserInGroup("remove", id, iduser, us.Token);
        if (responSaveRemoveUserInGr.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, responSaveRemoveUserInGr.Message);
            DialogService.Close();
            await GetUserinGr();

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, responSaveRemoveUserInGr.Message);
        }
    }

}
