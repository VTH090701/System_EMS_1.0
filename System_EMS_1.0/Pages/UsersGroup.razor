@* @page "/usersgroup/{id}" *@
@using Data
@using Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@using Newtonsoft.Json

<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">

        <div style="display:flex">
            <RadzenIcon Icon="exit_to_app" class="rz-mt-1 rz-mr-2" Style="font-size:xx-large;transform: rotate(180deg);cursor:pointer" @onclick="NavUserGr" />

            <RadzenText TextStyle="TextStyle.H4"> Thông tin trong nhóm</RadzenText>

        </div>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenButton Text="Thêm người dùng" Style="float:right" Icon="add" Click="AddUserInGr" class="rz-background-color-info-dark"></RadzenButton>
    </RadzenColumn>
</RadzenRow>
<hr />
<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
        @if (responUserinGroup != null && responUserinGroup.Count > 0)
        {
            <RadzenDataGrid Data="@responUserinGroup" TItem="UsersinGroup" AllowVirtualization=" true"
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                            AllowSorting="true">
                <Columns>
                    @* <RadzenDataGridColumn TItem="UsersinGroup" Property="Userid" Title=" Id" /> *@
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Displayname" Title="Tên" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Phonenumber" Title="Số điện thoại" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Email" Title="Email" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Property="Timejoin" Title="Thời gian vào" />
                    <RadzenDataGridColumn TItem="UsersinGroup" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="UsersinGroup">
                            <RadzenButton Shade="Shade.Lighter" Icon="delete" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                                    DeleteUserInGr(UsersinGroup.Userid) )">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <span>Không có dữ liệu</span>
        }

    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">   
        @if (listRoles != null)
        {

            <RadzenDataGrid Data="@listRoles" TItem="RoleUser" AllowVirtualization="true" Style="height:550px"
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                            AllowSorting="true">
                <Columns>
                    <RadzenDataGridColumn TItem="RoleUser" Property="Rolename" Title="Tên quyền" />
                    <RadzenDataGridColumn TItem="RoleUser" Property="Description" Title="Mô tả quyền" />
                    <RadzenDataGridColumn TItem="RoleUser" Width="70px">

                        <Template Context="data">

                            @if (listRolesGroup != null)
                            {
                                @if (listRolesGroup.Any(item1 => item1.Rolename == data.Rolename) == true)
                                {
                                    var checktrue = true;
                                    <RadzenCheckBox TriState="false" Value="checktrue"
                                                    TValue="bool" Change="()=>RevokeGroup(data.Rolename)" />
                                }
                                else
                                {
                                    var checkfalse = false;
                                    <RadzenCheckBox TriState="false" Value="checkfalse"
                                                    TValue="bool" Change="()=>GrantGroup(data.Rolename)" />
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        }
    </RadzenColumn>
</RadzenRow>





@code {
    [Parameter] public string id { set; get; }
    [Parameter] public EventCallback OnButtonClick { get; set; }

    private void NavUserGr()
    {
        OnButtonClick.InvokeAsync();
    }
   



    private bool isConnected;
    private ResponLogin us = new ResponLogin();
    private List<UsersinGroup> responUserinGroup = new List<UsersinGroup>();
    private Variant variant = Variant.Outlined;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isConnected = true;
                await GetUserinGr();
                await GetUser();
                await GetListRoles();
                await GetListRolesGroup();
            }
            StateHasChanged();
        }
    }

    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    private List<RoleUser> listRoles = new List<RoleUser>();
    private async Task GetListRoles()
    {
        var result = await ApiService.ListRoles(us.Token);
        if (result != null && result.Code == 200)
        {
            listRoles = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
        }
    }

    private List<RoleUser> listRolesGroup = new List<RoleUser>();
    private async Task GetListRolesGroup()
    {
        var result = await ApiService.ListRolesGroup(id, us.Token);
        if (result != null && result.Code == 200)
        {
            listRolesGroup = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
        }
        else if (result != null && result.Code == 404)
        {
            listRolesGroup = new List<RoleUser>();
        }
    }

   

    public async Task GrantGroup(string rolename)
    {

        var result = await ApiService.GrantRolesGroup("grant", id, rolename, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
        await ReloadList();

    }
    public async Task RevokeGroup(string rolename)
    {

        var result = await ApiService.GrantRolesGroup("revoke", id, rolename, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }

        await ReloadList();

    }
    private async Task ReloadList()
    {
        await GetListRoles();
        await GetListRolesGroup();
        StateHasChanged();
    }

    private async Task GetUserinGr()
    {
        var result = await ApiService.GetUsersInGroup(id, us.Token);
        if (result.Code == 200)
        {
            var result1 = JsonConvert.DeserializeObject<List<UsersinGroup>>(result.Value.ToString());
            responUserinGroup = result1;
        }
        else if (result.Code == 404)
        {
            responUserinGroup = new List<UsersinGroup>();
        }
    }

    private List<UserModel> responGetUser = new List<UserModel>();

    private async Task GetUser()
    {
        var result = await ApiService.GetUser(us.Token);
        if (result != null && result.Code == 200)
        {
            responGetUser = JsonConvert.DeserializeObject<List<UserModel>>(result.Value.ToString());
        }
    }

    private async Task AddUserInGr()
    {
        var result = await DialogService.OpenAsync("Thêm người dùng vào nhóm", ds =>
                        {
    string userid = "";
    return @<RadzenStack Gap="1.5rem">
        <RadzenStack>
            @if (responGetUser != null)
        {
            <RadzenFormField Text="Người dùng" Variant="@variant">


                <RadzenDropDown @bind-Value=userid Data=@responGetUser AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" TextProperty="Displayname" ValueProperty="Userid" Placeholder="Chọn người dùng"/>
            </RadzenFormField>
        }
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Thêm" Click="() => SaveUserinGr(userid)" Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
    ;});

    }

  

    private async Task SaveUserinGr(string iduser)
    {
        var result = await ApiService.Add_RemoveUserInGroup("add", id, iduser, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);

            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
    }

    async Task Reload()
    {
        await GetUserinGr();
        StateHasChanged();
    }


    private async Task DeleteUserInGr(string iduser)
    {
        var result = await ApiService.Add_RemoveUserInGroup("remove", id, iduser, us.Token);
        if (result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);

            DialogService.Close();
            await GetUserinGr();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
    }



}
