@page "/rotation"
@using Data
@using Services
@using Newtonsoft.Json
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification
@inject DialogService DialogService
@inject HttpClient _httpclient



<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="10" Size="12">


        <RadzenRow>
            <RadzenText TextStyle="TextStyle.H5">Lịch sử luân chuyển:</RadzenText>

            @* <RadzenDropDown @bind-Value=device_id Data=@listdevice AllowVirtualization="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            TextProperty="Devicename" ValueProperty="Deviceid" Style="width: 100%; max-width: 300px;" Placeholder="Chọn thiết bị chính" Change="ChangeRotation" /> *@

            <RadzenDropDown @bind-Value="@device_id" Data=@listdevice AllowVirtualization="true" AllowClear="true" AllowFiltering="true" TextProperty="Devicename" ValueProperty="Deviceid" Placeholder="Chọn loại thiết bị" Change="ChangeRotation" Style="width: 100%; max-width: 300px;" />
        </RadzenRow>
    </RadzenColumn>

    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="2" Size="12">
        <RadzenButton Text="thiết bị" Style="float:right" Icon="3d_rotation" Click="AddRotation" class="rz-background-color-info-dark"></RadzenButton>
    </RadzenColumn>

</RadzenRow>
<hr />

@if (listrotation != null && listrotation.Count > 0)
{
    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="9" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@listrotation" TItem="RotationModel" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Style="height:550px">
        <Columns>
            <RadzenDataGridColumn TItem="RotationModel" Title="Bộ phận" Property="Departmentid">
                <Template Context="data">
                    @{
                        DepartmentModel depart = responDepartment.FirstOrDefault(item => item.Departmentid == data.Departmentid);
                        if (depart != null)
                        {
                            <span>@depart.Departmentname</span>
                        }
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RotationModel" Title="Luân chuyển từ" Property="Rotafrom">
                <Template Context="data">
                    @{
                        DepartmentModel depart = responDepartment.FirstOrDefault(item => item.Departmentid == data.Rotafrom);
                        if (depart != null)
                        {
                            <span>@depart.Departmentname</span>
                        }
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RotationModel" Title="Luân chuyển đến" Property="Rotato">
                <Template Context="data">
                    @{
                        DepartmentModel depart = responDepartment.FirstOrDefault(item => item.Departmentid == data.Rotato);
                        if (depart != null)
                        {
                            <span>@depart.Departmentname</span>
                        }
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RotationModel" Title="Ngày luân chuyển" Property="Daterotation">
                <Template Context="data">
                    @{
                        DateOnly.TryParse(data.Daterotation, out DateOnly startdate);
                        <span>@startdate</span>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RotationModel" Title="Ngày kết thúc" Property="Dateend">
                <Template Context="data">
                    @{
                        DateOnly.TryParse(data.Dateend, out DateOnly enddate);
                        if (data.Status == true)
                        {

                        }
                        else
                        {
                            <span>@enddate</span>
                        }
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="RotationModel" Filterable="false" Property="Status" Width="70px">
                <Template Context="data">
                    @{
                        <RadzenCheckBox @bind-Value=@data.Status Disabled />
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <span>Không có dữ liệu</span>
}



@code {

    private int device_id = 0;
    private List<DeviceModel> listdevice = new List<DeviceModel>();
    private Variant variant = Variant.Outlined;
    private bool isConnected;
    private ResponLogin us = new ResponLogin();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isConnected = true;
                await GetDepartment();
                await GetDevice();
            }
            StateHasChanged();
        }
    }

    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task AddRotation()
    {

        var result = await DialogService.OpenAsync("Luân chuyển thiết bị", ds =>
                                {

    int deid = 0;
    string departid = "";
    return @<RadzenStack Gap="1.5rem">
        <RadzenStack Orientation="Orientation.Vertical" Gap="15px">

            @if (listdevice != null)
        {
            <RadzenFormField Text="Thiết bị" Variant="@variant">
                <RadzenDropDown @bind-Value="@deid" Data=@listdevice AllowVirtualization="true" AllowClear="true"
                                AllowFiltering="true" TextProperty="Devicename" ValueProperty="Deviceid" Placeholder="Chọn thiết bị" />
            </RadzenFormField>
        }

            @if (responDepartment != null)
        {
            <RadzenFormField Text="Bộ phận" Variant="@variant">
                <RadzenDropDown @bind-Value="@departid" Data=@responDepartment AllowVirtualization="true" AllowClear="true"
                                AllowFiltering="true" TextProperty="Departmentname" ValueProperty="Departmentid" Placeholder="Chọn bộ phận" />
            </RadzenFormField>
        }
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Lưu" Click="() => saveRotation(deid , departid)" Style="width: 80px;" />

        </RadzenStack>
    </RadzenStack>
            ;
                            });
    }

    private async Task saveRotation(int deid, string departid)
    {
        var result = await ApiService.SaveRotation(deid, departid, us.Token);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);


            DialogService.Close();
            await ChangeRotation();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result.Message);
        }
    }

    private List<GroupModel> responGroup = new List<GroupModel>();
    private async Task Getgroup()
    {
        var result = await ApiService.GetGroup(us.Token);
        if (result != null && result.Code == 200)
        {
            responGroup = JsonConvert.DeserializeObject<List<GroupModel>>(result.Value.ToString());
        }
    }

    private List<RotationModel> listrotation = new List<RotationModel>();
    private async Task ChangeRotation()
    {
        if (device_id != 0)
        {
            var result = await ApiService.GetRotation(device_id, us.Token);
            if (result != null && result.Code == 200)
            {
                listrotation = JsonConvert.DeserializeObject<List<RotationModel>>(result.Value.ToString());
            }
            else if (result.Code == 404)
            {
                listrotation = new List<RotationModel>();
            }
        }
        else
        {
            listrotation = new List<RotationModel>();
        }
    }

    private List<DepartmentModel> responDepartment = new List<DepartmentModel>();
    private async Task GetDepartment()
    {

        var result = await ApiService.GetDepartment(us.Token);
        if (result != null && result.Code == 200)
        {
            responDepartment = JsonConvert.DeserializeObject<List<DepartmentModel>>(result.Value.ToString());
        }

    }

    private async Task GetDevice()
    {
        var result = await ApiService.GetListDevice(us.Token);

        if (result != null && result.Code == 200)
        {
            listdevice = JsonConvert.DeserializeObject<List<DeviceModel>>(result.Value.ToString());
        }
        else
        {
            listdevice = new List<DeviceModel>();
        }
    }




}
