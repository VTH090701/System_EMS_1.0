@inherits LayoutComponentBase
@using Data
@using Services
@using Newtonsoft.Json
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IDeviceService ApiService
@inject NavigationManager NavigationManager
@inject NotificationService notification

<RadzenComponents />
<PageTitle>System EMS</PageTitle>
<RadzenLayout style="position: relative;grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="0" >
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0"  >
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <RadzenLabel Text="VASD" Style="font-weight:600;font-size:22px" />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                @if (us != null)
                {
                    if (us.Displayname != null)
                    {
                        <RadzenText Style="font-size:18px" class="rz-mt-2 rz-mr-2">@us.Displayname </RadzenText>
                    }
                    else
                    {
                        <RadzenText>chưa lấy được tên</RadzenText>
                    }
                }
                else
                {
                    <RadzenText>Chưa đăng nhập</RadzenText>
                }
                <RadzenProfileMenu >
                    
                    <Template>

                        @*<RadzenGravatar>
                        </RadzenGravatar>*@
                        
                        <div><RadzenIcon Icon="account_circle" Style="font-size:25px;" class="rz-mt-1 rz-pr-1" /></div>
                    </Template>

                    <ChildContent >
                        <button @onclick="NaveProfile" class="rz-background-color-white" style="border: none;">
                            <div style="display:flex;">
                                <RadzenIcon Icon=" assignment_ind" />Hồ sơ
                            </div>
                        </button>
                        <br />
                        <button @onclick="Logout" class="rz-background-color-white" style="border: none;">
                            <div style="display:flex;">
                                <RadzenIcon Icon="logout" />Đăng xuất
                            </div>
                        </button>
                    </ChildContent>
                </RadzenProfileMenu>
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" Class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@(() => sidebarExpanded = false)" />
        </RadzenStack>
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Trang chủ" Icon="dashboard" Path="dashboard" Click="NavitemSiber" />
            <RadzenPanelMenuItem Text="Phòng ban" Icon="class" Path="department" Click="NavitemSiber" />
            <RadzenPanelMenuItem Text="Nhóm" Icon="group_work" Path="group" Click="NavitemSiber" />
            
            @if(isCreateUser == true)
            {
                <RadzenPanelMenuItem Text="Người dùng" Icon="account_box" Path="user" Click="NavitemSiber" />

            }


            <RadzenPanelMenuItem Text="Thiết bị" Icon="list" >
                <RadzenPanelMenuItem Text="Danh mục thiết bị" Icon="" Path="devices" Click="NavitemSiber" />
                <RadzenPanelMenuItem Text="Tìm kiếm thiết bị" Icon="" Path="searchdevice" Click="NavitemSiber" />
            </RadzenPanelMenuItem>


            <RadzenPanelMenuItem Text="Sửa chữa" Icon="build" Path="repairdevice" Click="NavitemSiber" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @if (isprofile)
            {
                <System_EMS_1._0.Pages.Profile id="us.Userid" />
            }
            else
            {
                @Body
            }
        </div>
    </RadzenBody>

    @if (sidebarExpanded)
    {
        <div @onclick="@(() => sidebarExpanded = false)" class="rz-dialog-mask" style="position: absolute; z-index: 2"></div>
    }

</RadzenLayout>



@code {
    private bool isprofile = false;
    private bool sidebarExpanded = false;
    private ResponLogin us = new ResponLogin();
    private bool isConnected;
    private bool isCreateUser = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");

                isprofile = false;

            }
            else
            {
                isConnected = true;
                await GetListUser();
                GetUser();
                await GetListRolesUser();

            }
            StateHasChanged();
        }
    }


    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }



    private async Task Logout()
    {
        if (us.Userid != null)
        {
            var result = await ApiService.Logout(us.Userid);
            if (result.Code == 200)
            {
                notification.Notify(NotificationSeverity.Success, result.Message);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                notification.Notify(NotificationSeverity.Warning, result.Message);
            }
        }
    }

    private void NaveProfile()
    {
        if (us.Userid != null)
        {
            //NavigationManager.NavigateTo($"/profile/{us.Userid}");
            isprofile = true;
        }
    }
    private void NavitemSiber()
    {
        if (us.Userid != null)
        {
            //NavigationManager.NavigateTo($"/profile/{us.Userid}");
            isprofile = false;

            sidebarExpanded = false;
        }
    }

    private UserModel? user = new UserModel();
    private void GetUser()
    {
        user = responGetUser.FirstOrDefault(item => item.Userid == us.Userid);
    }
    private List<UserModel> responGetUser = new List<UserModel>();
    private async Task GetListUser()
    {
        var result = await ApiService.GetUser(us.Token);
        if (result != null && result.Code == 200)
        {
            var res = JsonConvert.DeserializeObject<List<UserModel>>(result.Value.ToString());
            responGetUser = res;
        }
    }

    private List<RoleUser> listRolesUser = new List<RoleUser>();
    private async Task GetListRolesUser()
    {
        //Lấy ds quyền người dùng
        var result = await ApiService.ListRolesUser(user?.Userid, us.Token);
        if (result != null && result.Code == 200)
        {
            var res = JsonConvert.DeserializeObject<List<RoleUser>>(result.Value.ToString());
            listRolesUser = res;
        }
        else if (result?.Code == 404)
        {
            listRolesUser = new List<RoleUser>();
        }
        //Check coi có quyền thêm user không
        @foreach (var item in listRolesUser)
        {
            if (item.Rolename == "create_user")
            {
                isCreateUser = true;
            }
        }

    }


}
